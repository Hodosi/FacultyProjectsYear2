2.
a) Definiti o functie care selecteaza al n-lea element al unei liste, sau 
NIL, daca nu exista.
b) Sa se construiasca o functie care verifica daca un atom e membru al unei 
liste nu neaparat liniara.
c) Sa se construiasca lista tuturor sublistelor unei liste. Prin sublista se 
intelege fie lista insasi, fie un element de pe orice nivel, care este 
lista. Exemplu: (1 2 (3 (4 5) (6 7)) 8 (9 10)) => 
( (1 2 (3 (4 5) (6 7)) 8 (9 10)) (3 (4 5) (6 7)) (4 5) (6 7) (9 10) ).
d) Sa se scrie o functie care transforma o lista liniara intr-o multime.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

l = lista
lung = lungimea listei
n = pozitia lementului in lista


select(l1l2..llung, n) = { nil                 , lung = 0
                         { l1                  , n = 0
                         { select(l2..ln, n-1) , altfel

Exemple de testare:

select([], 5) = nil
select([1,2,3,4,5], 4) = 5
select([1,2,3,4,5], 0) = 1

-----------------------------------------------------------------------------------------------------------------------------------------------------------

l = lista
n = lungimea listei
atm = atom

apare(l1l2...ln, atm) = { nil           , n = 0
                        { true          , l1 = atm
                        { apare(l2..ln) , atom(l1) = true
                        { apare(l1)     , apare(l1) = true
                        { apare(l2..ln) , altfel

Exemple de testare:

apare([], 3) = nil
apare([1,[4,4], 3, [6, 5], 1) = true
apare([1,[4,3], 5, [6, 5], 1) = true
apare([1,[4,4], 3, [6, 5], 3) = true
apare([4,5,[3,4], 6], 7) = nil

-----------------------------------------------------------------------------------------------------------------------------------------------------------

l = lista
n = lungimea listei

subliste(l1l2..ln) = { nil                                                                , n = 0
                     { subliste(l2..ln)                                                   , atom(l1)
                     { lista_valorilor_superficial(l1) + subliste(l1) + subliste(l2...ln) , altfel

Exemple de testare:

subliste([]) = nil
subliste([(1 2 (3) 8 (9 10))]) = [(3) (9 10) )]
subliste([(1 2 (3 (4 5) (6 7)) 8 (9 10))]) = [(3 (4 5) (6 7)) (4 5) (6 7) (9 10) )]


sublisteMain(l1l2..ln) = subliste(lista_valorilor_superficial(l1l2..ln))

Exemple de testare:

sublisteMain([]) = nil
sublisteMain([(1 2 (3) 8 (9 10))]) = [( (1 2 (3) 8 (9 10)) (3) (9 10) )]
sublisteMain([(1 2 (3 (4 5) (6 7)) 8 (9 10))]) = [( (1 2 (3 (4 5) (6 7)) 8 (9 10)) (3 (4 5) (6 7)) (4 5) (6 7) (9 10) )]

-----------------------------------------------------------------------------------------------------------------------------------------------------------

l = lista
n = lungimea listei

listaToMultime(l1l2...ln) = { nil                         , n = 0
                            { listaToMultime(l2..ln)      , apare(l2..ln, l1)
                            { l1 + listaToMultime(l2..ln) , altfel

listaToMultime() = nil
listaToMultime([1,3,1,3,4,2,3]) = [1, 4, 2, 3]
listaToMultime([1,2,6,2,3]) = [1, 6, 2, 3]
-----------------------------------------------------------------------------------------------------------------------------------------------------------